// 1 maison communique avec market et les autres maisons via MessageQueues (voir td4)
// les maisons envoient et recoivent des messages via send() et receive()
//voir https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool

// Une maison possède 3 paramètres, il sont désignés aléatoirement pour chaque maison
Entier conso ← ... // le taux de consommation d'énergie,
Entier prod ← ... // production initiale d'une maison,
Chaine etat ← ... // politique d'échange, (donner, vendre, vendre si aucun "demandeur")


Entier clé ← ... // la clé pour communiquer avec market via MessageQueue
Entier nom ← ... // le nom de la mémoire partagée

MessageQueue mq ← connexionMarket(cle) // on connecte chaque maison au market avec qui on va envoyer et recevoir des messages via MessageQueues

Shared Memoy mem ← connexionWeather(nom) // se connecte à la mémoire en read-only access avec mmap() via le nom de la mémoire , renvoie FAUX Si il y a eu un problème,

maison(Entier conso,Entier prod, Chaine etat, Entier cle):
  Tant Que VRAI Alors
    conso ← MajConsoWeather(mem,verrou,conso) // on met à jour la consommation en regardant la météo via la mémoire partagée de weather
    conso ← MajConsoMarket(cle,conso) // on met à jour la consommation en regardant la valeur du prix dans market
    afficher conso
    energie ← conso - prod
    Si energie > 0 ALORS : // consommation supérieur à la production, la maison manque d'énergie
      mendierEnergie(energie) // la maison va "mendier de l'energie" aux maisons qui sont en états 1 ou 3
      achatEnergie(energie) // si aucun procs ne lui donne ou alors pas assez, elle va en acheter au marché
    Sinon // production supérieure à la consommation, la maison a un surplus d'énergie
      Si ETAT = 1 : // donner son surplus
        donnerEnergie(energie) // le procs va donner son surplus à la première maison "mendiante" qu'il rencontre
        //si il n'y a aucune maison qui en a besoin, il se met en attente
      Sinon Si ETAT = 2 : //vendre au marché
        vendreEnergie(energie,cle) //vend le surplus au marché
      Sinon // etat 3, vendre si aucune demande
        don = donnerEnergie(energier,timer) //on regarder d'abord si une maison est "mendiante", si aucune on attend un certain Temps
        Si !(don)  ALORS : //si aucune maison ne voulait d'énergie alors on vend le surplus au marché
          vendreEnergie(energie,cle)

initialisationMaisons(cle,nom) // démarrage de chaque maison, on va les gérer via un Pool de process utilisé comme un manager, de manière synchrone

finHome() // termine les processus
